var searchIndex = JSON.parse('{\
"lta":{"doc":"lta-rsüöç Singapore LTA Datamall Rust async first client.‚Ä¶","i":[[3,"Bus","lta","Bus type that implements APIs. Can be either blocking or‚Ä¶",null,null],[3,"Crowd","","Crowd type that implements APIs. Can be either blocking or‚Ä¶",null,null],[3,"Taxi","","Taxi type that implements APIs. Can be either blocking or‚Ä¶",null,null],[3,"Traffic","","Traffic type that implements APIs. Can be either blocking‚Ä¶",null,null],[3,"Train","","Train type that implements APIs. Can be either blocking or‚Ä¶",null,null],[3,"Geo","","Geo type that implements APIs. Can be either blocking or‚Ä¶",null,null],[3,"Facility","","Facility type that implements APIs. Can be either blocking‚Ä¶",null,null],[4,"LTAError","","LTAError type, all request using lta-rs returns `Result<T,‚Ä¶",null,null],[13,"BackendError","","Internal error within the client backend, open a PR if‚Ä¶",0,null],[13,"InvalidAPIKey","","API key is most likely empty",0,null],[13,"RateLimitReached","","",0,null],[13,"UnknownEnumVariant","","",0,null],[13,"Unauthorized","","Make sure that your API key is correct and valid",0,null],[13,"NotFound","","HTTP NOTFOUND",0,null],[13,"UnhandledStatusCode","","Undocumented status code, open an issue if this happens",0,null],[13,"Custom","","Custom",0,null],[0,"prelude","","Imports for important structs",null,null],[0,"async","","Internal Async module",null,null],[0,"bus","lta::async","",null,null],[8,"BusRequests","lta::async::bus","All API pertaining to buses",null,null],[10,"get_arrival","","Returns real-time Bus Arrival information of Bus Services‚Ä¶",1,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_bus_services","","Returns detailed service information for all buses‚Ä¶",1,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_bus_routes","","Returns detailed route information for all services‚Ä¶",1,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_bus_stops","","Returns detailed information for all bus stops currently‚Ä¶",1,[[["option",4]],[["pin",3],["box",3]]]],[0,"client","lta::async","Client for interacting with LTA API",null,null],[3,"LTAClient","lta::async::client","A `Client` to make requests with The `Client` holds a‚Ä¶",null,null],[0,"crowd","lta::async","",null,null],[8,"CrowdRequests","lta::async::crowd","All APIs pertaining to transportation crowd\\\\\",null,null],[10,"get_passenger_vol_by","","Creates a new client for every call Update freq: By 15th‚Ä¶",2,[[["option",4],["option",4],["voltype",4],["naivedate",3]],[["box",3],["pin",3]]]],[0,"facility","lta::async","",null,null],[8,"FacilityReqeusts","lta::async::facility","",null,null],[10,"get_facilities_maintenance","","Returns pre-signed links to JSON file containing‚Ä¶",3,[[["stationcode",4]],[["box",3],["pin",3]]]],[0,"geo","lta::async","",null,null],[8,"GeoRequests","lta::async::geo","",null,null],[10,"get_geospatial_whole_island","","Returns the SHP files of the requested geospatial layer",4,[[["geospatiallayerid",4]],[["box",3],["pin",3]]]],[0,"taxi","lta::async","",null,null],[8,"TaxiRequests","lta::async::taxi","All APIs pertaining to taxis",null,null],[10,"get_taxi_avail","","Returns location coordinates of all Taxis that are‚Ä¶",5,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_taxi_stands","","Returns detailed information of Taxi stands, such as‚Ä¶",5,[[["option",4]],[["box",3],["pin",3]]]],[0,"traffic","lta::async","",null,null],[8,"TrafficRequests","lta::async::traffic","",null,null],[10,"get_erp_rates","","Returns ERP rates of all vehicle types across all timings‚Ä¶",6,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_carpark_avail","","Returns no. of available lots for HDB, LTA and URA carpark‚Ä¶",6,[[["option",4]],[["box",3],["pin",3]]]],[10,"get_est_travel_time","","Returns estimated travel times of expressways (in segments).",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_faulty_traffic_lights","","Returns alerts of traffic lights that are currently‚Ä¶",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_road_details","","Returns all planned road openings or road works depending‚Ä¶",6,[[["roaddetailstype",4],["option",4]],[["pin",3],["box",3]]]],[10,"get_traffic_speed_band","","Returns current traffic speeds on expressways and arterial‚Ä¶",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_traffic_images","","Returns links to images of live traffic conditions along‚Ä¶",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_traffic_incidents","","Returns current traffic speeds on expressways and arterial‚Ä¶",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_vms_emas","","Returns traffic advisories (via variable message services)‚Ä¶",6,[[["option",4]],[["pin",3],["box",3]]]],[10,"get_bike_parking","","Returns bicycle parking locations within a radius",6,[[["option",4]],[["box",3],["pin",3]]]],[0,"train","lta::async","",null,null],[8,"TrainRequests","lta::async::train","",null,null],[10,"get_train_service_alert","","Returns detailed information on train service‚Ä¶",7,[[["option",4]],[["pin",3],["box",3]]]],[0,"prelude","lta::async","",null,null],[0,"blocking","lta","Internal Blocking module",null,null],[0,"bus","lta::blocking","",null,null],[8,"BusRequests","lta::blocking::bus","All API pertaining to buses",null,null],[10,"get_arrival","","Returns real-time Bus Arrival information of Bus Services‚Ä¶",8,[[["option",4]],[["ltaresult",6],["busarrivalresp",3]]]],[10,"get_bus_services","","Returns detailed service information for all buses‚Ä¶",8,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_bus_routes","","Returns detailed route information for all services‚Ä¶",8,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_bus_stops","","Returns detailed information for all bus stops currently‚Ä¶",8,[[["option",4]],[["vec",3],["ltaresult",6]]]],[0,"client","lta::blocking","Client for interacting with LTA API",null,null],[3,"LTAClient","lta::blocking::client","A `Client` to make requests with The `Client` holds a‚Ä¶",null,null],[0,"crowd","lta::blocking","",null,null],[8,"CrowdRequests","lta::blocking::crowd","All APIs pertaining to transportation crowd",null,null],[10,"get_passenger_vol_by","","Creates a new client for every call Update freq: By 15th‚Ä¶",9,[[["option",4],["option",4],["voltype",4],["naivedate",3]],[["ltaresult",6],["vec",3]]]],[0,"facility","lta::blocking","",null,null],[8,"FacilityReqeusts","lta::blocking::facility","",null,null],[10,"get_facilities_maintenance","","Returns pre-signed links to JSON file containing‚Ä¶",10,[[["stationcode",4]],[["ltaresult",6],["vec",3]]]],[0,"geo","lta::blocking","",null,null],[8,"GeoRequests","lta::blocking::geo","",null,null],[10,"get_geospatial_whole_island","","Returns the SHP files of the requested geospatial layer",11,[[["geospatiallayerid",4]],[["ltaresult",6],["vec",3]]]],[0,"taxi","lta::blocking","",null,null],[8,"TaxiRequests","lta::blocking::taxi","All APIs pertaining to taxis",null,null],[10,"get_taxi_avail","","Returns location coordinates of all Taxis that are‚Ä¶",12,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_taxi_stands","","Returns detailed information of Taxi stands, such as‚Ä¶",12,[[["option",4]],[["ltaresult",6],["vec",3]]]],[0,"traffic","lta::blocking","",null,null],[8,"TrafficRequests","lta::blocking::traffic","",null,null],[10,"get_erp_rates","","Returns ERP rates of all vehicle types across all timings‚Ä¶",13,[[["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_carpark_avail","","Returns no. of available lots for HDB, LTA and URA carpark‚Ä¶",13,[[["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_est_travel_time","","Returns estimated travel times of expressways (in segments).",13,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_faulty_traffic_lights","","Returns alerts of traffic lights that are currently‚Ä¶",13,[[["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_road_details","","Returns all planned road openings or road works depending‚Ä¶",13,[[["roaddetailstype",4],["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_traffic_speed_band","","Returns current traffic speeds on expressways and arterial‚Ä¶",13,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_traffic_images","","Returns links to images of live traffic conditions along‚Ä¶",13,[[["option",4]],[["vec",3],["ltaresult",6]]]],[10,"get_traffic_incidents","","Returns current traffic speeds on expressways and arterial‚Ä¶",13,[[["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_vms_emas","","Returns traffic advisories (via variable message services)‚Ä¶",13,[[["option",4]],[["ltaresult",6],["vec",3]]]],[10,"get_bike_parking","","Returns bicycle parking locations within a radius",13,[[["option",4]],[["vec",3],["ltaresult",6]]]],[0,"train","lta::blocking","",null,null],[8,"TrainRequests","lta::blocking::train","",null,null],[10,"get_train_service_alert","","Returns detailed information on train service‚Ä¶",14,[[["option",4]],[["ltaresult",6],["trainservicealert",3]]]],[0,"prelude","lta::blocking","",null,null],[6,"LTAResult","lta","Type alias for `Result<T, LTAError>`",null,null],[8,"Client","","A `Client` to make requests with The `Client` holds a‚Ä¶",null,null],[16,"InternalClient","","Any backend Client",15,null],[16,"RB","","Any type that can build requests",15,null],[10,"new","","General constructor for `Self`",15,[[["string",3],["into",8]]]],[10,"with_api_key","","This method not assign the `api_key` in struct if the‚Ä¶",15,[[["string",3],["into",8]],["ltaresult",6]]],[10,"req_builder","","Returns `Self::RB`",15,[[]]],[14,"api_url","","Helper macro to general API URL at compile time",null,null],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"equivalent","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"equivalent","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"equivalent","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"equivalent","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"equivalent","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","lta::async::client","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","lta::blocking::client","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"get_arrival","lta","",16,[[["ltaclient",3],["option",4]],[["ltaresult",6],["busarrivalresp",3]]]],[11,"get_bus_services","","",16,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_bus_routes","","",16,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_bus_stops","","",16,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_passenger_vol_by","","",17,[[["voltype",4],["ltaclient",3],["option",4],["option",4],["naivedate",3]],[["ltaresult",6],["vec",3]]]],[11,"get_facilities_maintenance","","",22,[[["ltaclient",3],["stationcode",4]],[["ltaresult",6],["vec",3]]]],[11,"get_geospatial_whole_island","","",21,[[["ltaclient",3],["geospatiallayerid",4]],[["ltaresult",6],["vec",3]]]],[11,"get_taxi_avail","","",18,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_taxi_stands","","",18,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_erp_rates","","",19,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_carpark_avail","","",19,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_est_travel_time","","",19,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_faulty_traffic_lights","","",19,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_road_details","","",19,[[["roaddetailstype",4],["ltaclient",3],["option",4]],[["ltaresult",6],["vec",3]]]],[11,"get_traffic_speed_band","","",19,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_traffic_images","","",19,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_traffic_incidents","","",19,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_vms_emas","","",19,[[["option",4],["ltaclient",3]],[["ltaresult",6],["vec",3]]]],[11,"get_bike_parking","","",19,[[["option",4],["ltaclient",3]],[["vec",3],["ltaresult",6]]]],[11,"get_train_service_alert","","",20,[[["option",4],["ltaclient",3]],[["ltaresult",6],["trainservicealert",3]]]],[11,"new","lta::async::client","",23,[[["string",3],["into",8]],["ltaclient",3]]],[11,"with_api_key","","",23,[[["string",3],["into",8]],["ltaresult",6]]],[11,"req_builder","","",23,[[]]],[11,"new","lta::blocking::client","",24,[[["string",3],["into",8]],["ltaclient",3]]],[11,"with_api_key","","",24,[[["string",3],["into",8]],["ltaresult",6]]],[11,"req_builder","","",24,[[]]],[11,"get_arrival","lta","",16,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_bus_services","","",16,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_bus_routes","","",16,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_bus_stops","","",16,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_passenger_vol_by","","",17,[[["voltype",4],["option",4],["ltaclient",3],["option",4],["naivedate",3]],[["box",3],["pin",3]]]],[11,"get_facilities_maintenance","","",22,[[["ltaclient",3],["stationcode",4]],[["box",3],["pin",3]]]],[11,"get_geospatial_whole_island","","",21,[[["ltaclient",3],["geospatiallayerid",4]],[["box",3],["pin",3]]]],[11,"get_taxi_avail","","",18,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_taxi_stands","","",18,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_erp_rates","","",19,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_carpark_avail","","",19,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_est_travel_time","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_faulty_traffic_lights","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_road_details","","",19,[[["ltaclient",3],["roaddetailstype",4],["option",4]],[["pin",3],["box",3]]]],[11,"get_traffic_speed_band","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_traffic_images","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_traffic_incidents","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_vms_emas","","",19,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"get_bike_parking","","",19,[[["ltaclient",3],["option",4]],[["box",3],["pin",3]]]],[11,"get_train_service_alert","","",20,[[["ltaclient",3],["option",4]],[["pin",3],["box",3]]]],[11,"clone","lta::async::client","",23,[[],["ltaclient",3]]],[11,"clone","lta::blocking::client","",24,[[],["ltaclient",3]]],[11,"clone","lta","",16,[[],["bus",3]]],[11,"clone","","",17,[[],["crowd",3]]],[11,"clone","","",18,[[],["taxi",3]]],[11,"clone","","",19,[[],["traffic",3]]],[11,"clone","","",20,[[],["train",3]]],[11,"clone","","",21,[[],["geo",3]]],[11,"clone","","",22,[[],["facility",3]]],[11,"cmp","","",16,[[["bus",3]],["ordering",4]]],[11,"cmp","","",17,[[["crowd",3]],["ordering",4]]],[11,"cmp","","",18,[[["taxi",3]],["ordering",4]]],[11,"cmp","","",19,[[["traffic",3]],["ordering",4]]],[11,"cmp","","",20,[[["train",3]],["ordering",4]]],[11,"cmp","","",21,[[["geo",3]],["ordering",4]]],[11,"cmp","","",22,[[["facility",3]],["ordering",4]]],[11,"eq","","",16,[[["bus",3]]]],[11,"eq","","",17,[[["crowd",3]]]],[11,"eq","","",18,[[["taxi",3]]]],[11,"eq","","",19,[[["traffic",3]]]],[11,"eq","","",20,[[["train",3]]]],[11,"eq","","",21,[[["geo",3]]]],[11,"eq","","",22,[[["facility",3]]]],[11,"partial_cmp","","",16,[[["bus",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",17,[[["crowd",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",18,[[["taxi",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",19,[[["traffic",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",20,[[["train",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",21,[[["geo",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["facility",3]],[["ordering",4],["option",4]]]],[11,"fmt","lta::async::client","",23,[[["formatter",3]],["result",6]]],[11,"fmt","lta::blocking::client","",24,[[["formatter",3]],["result",6]]],[11,"fmt","lta","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]]],"p":[[4,"LTAError"],[8,"BusRequests"],[8,"CrowdRequests"],[8,"FacilityReqeusts"],[8,"GeoRequests"],[8,"TaxiRequests"],[8,"TrafficRequests"],[8,"TrainRequests"],[8,"BusRequests"],[8,"CrowdRequests"],[8,"FacilityReqeusts"],[8,"GeoRequests"],[8,"TaxiRequests"],[8,"TrafficRequests"],[8,"TrainRequests"],[8,"Client"],[3,"Bus"],[3,"Crowd"],[3,"Taxi"],[3,"Traffic"],[3,"Train"],[3,"Geo"],[3,"Facility"],[3,"LTAClient"],[3,"LTAClient"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);